@model VkPost
@using System.Drawing;
@using System.Net.Http;
@using System.Text.RegularExpressions

@if (Model != null)
{
    <!-- Проверка и вывод видео -->
    @if (Model.VideoUrl != null && Model.VideoUrl.Any())
    {
        @foreach (var videoUrl in Model.VideoUrl)
        {
            var youtubeLink = Regex.Match(Model.Text, @"(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/[^\s]+");

            if (youtubeLink.Success)
            {
                <!-- Отображаем изображение-превью, если это YouTube -->
                <div class="video-container">
                    <img src="@Model.ImageUrl[0]" alt="Slide Image" class="rounded-video" />
                </div>
            }
            else
            {
                // Получаем размеры изображения и рисуем видео пропорционально
                var (width, height) = GetRemoteImageDimensions(Model.ImageUrl.FirstOrDefault());

                // Если это VK-видео, отображаем плеер с Full HD и автоплеем, но пропорционально размерам изображения
                <div style="position: relative; display: flex; justify-content: center; align-items: center; width: 100%; height: auto; margin-bottom: 30px;">
                    <iframe src="@videoUrl?autoplay=1&mute=1&controls=0&loop=1"
                            style="width:@Math.Max(width, 1280)px; height:@Math.Max(height, 720)px; border-radius: 50px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);"
                            frameborder="0"
                            allow="autoplay; encrypted-media; fullscreen; picture-in-picture; screen-wake-lock;"
                            allowfullscreen></iframe>
                </div>
            }
        }
    }
    else
    {
        <!-- Проверка и вывод фотографий -->
        @if (Model.ImageUrl.Count > 0 && !(Model.ImageUrl.Count == 1 && Model.ImageUrl[0] == "/img/no_photo_post.png"))
        {
            <div class="slider">
                <div class="slides">
                    @foreach (var imageUrl in Model.ImageUrl)
                    {
                        <div class="slide">
                            <img src="@imageUrl" alt="Slide Image" class="rounded-video" />
                        </div>
                    }
                </div>

                @if (Model.ImageUrl.Count > 1)
                {
                    <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
                    <a class="next" onclick="plusSlides(1)">&#10095;</a>
                }
            </div>
        }
    }

    <p>
        @Html.Raw(Model.Text
                .Replace("____________________________________ ", "</p><p>")
                .Replace("——————————————————", "</p><p>")
                .Replace("—— ", ""))
    </p>
}
else
{
    <h1>Произошла ошибка</h1>
}

<!-- Стили слайдера -->
<style>
    .slider {
        position: relative;
        width: 100%;
        overflow: hidden;
    }

    .slides {
        display: flex;
        transition: transform 0.5s ease;
    }

    .slide {
        flex: 0 0 100%;
    }

    .prev, .next {
        cursor: pointer;
        position: absolute;
        top: 50%;
        width: auto;
        margin-top: -22px;
        padding: 16px;
        color: #9268c1;
        font-weight: bold;
        font-size: 192px;
        transition: 0.6s ease;
        border-radius: 50%;
        user-select: none;
        background-color: transparent;
        text-decoration: none;
        border: none;
        outline: none;
    }

    .next {
        right: 0;
        border-radius: 50%;
    }

        .prev:hover, .next:hover {
            color: #c0add6; /* Цвет при наведении */
        }

        .prev.active, .next.active {
            color: #c0add6;
        }
</style>

<!-- Скрипт слайдера -->
<script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) {
        showSlides(slideIndex += n);
        updateButtonColors();
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
        updateButtonColors();
    }

    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("slide");
        if (n > slides.length) { slideIndex = 1 }
        if (n < 1) { slideIndex = slides.length }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }

    function updateButtonColors() {
        var prevButton = document.querySelector('.prev');
        var nextButton = document.querySelector('.next');

        prevButton.classList.remove('active');
        nextButton.classList.remove('active');

        if (slideIndex > 1) {
            prevButton.classList.add('active');
        }
        if (slideIndex < slides.length) {
            nextButton.classList.add('active');
        }
    }
</script>

@functions {
    // Функция для получения размеров удаленного изображения
    (int width, int height) GetRemoteImageDimensions(string imageUrl)
    {
        try
        {
            // Загрузка изображения по URL
            using (var client = new HttpClient())
            {
                var imageBytes = client.GetByteArrayAsync(imageUrl).Result;

                using (var ms = new MemoryStream(imageBytes))
                using (var image = Image.FromStream(ms))
                {
                    return (image.Width, image.Height);
                }
            }
        }
        catch (Exception ex)
        {
            // Лог ошибки и возврат стандартных размеров, если изображение не загрузилось
            Console.WriteLine($"Ошибка при загрузке изображения: {ex.Message}");
            return (1280, 720); // Минимальные размеры для видео
        }
    }
}