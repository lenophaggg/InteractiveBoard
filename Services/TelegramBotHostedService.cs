using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Args;
using Telegram.Bot.Types.ReplyMarkups;
using System.Threading;
using Microsoft.AspNetCore.SignalR.Protocol;
using static System.Net.Mime.MediaTypeNames;
using System.Configuration;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;

using iTextSharp.text;
using iTextSharp.text.pdf;
using Spire.Pdf;
using Patagames.Pdf;
using Patagames.Pdf.Net; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Patagames.Pdf.Net
using Patagames.Pdf.Enums;

using PdfSharpCore.Drawing;
using PdfSharpCore.Pdf;
using Xceed.Words.NET;

using System.Xml.XPath;
using Newtonsoft.Json.Linq;
using Microsoft.Extensions.Options;
using MyMvcApp.Models;
using static System.Net.WebRequestMethods;
using System.Drawing.Imaging;
using System.Drawing;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;

namespace MyMvcApp.Services
{
    public class TelegramBotHostedService : IHostedService
    {
        private readonly TelegramBotClient _botClient;
        private CancellationTokenSource _cts;
        private readonly IConfiguration _configuration;

        private readonly List<string> _allowedUsernames;

        private readonly List<string> mySolutions = new List<string> { "–ú–æ—è –∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä–º–∞ —á–∏—Å—Ç–∞, —è –≤ —ç—Ç–æ–º –¥–µ–ª–µ –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç!üßû‚Äç‚ôÇÔ∏è", "–Ø –≤—Å–µ–≥–æ –ª–∏—à—å –±–µ–∑–¥—É—à–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?üßû‚Äç‚ôÇÔ∏è",
            "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –≤ –æ—Ç–ø—É—Å–∫–µ –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!üßû‚Äç‚ôÇÔ∏è", "–Ø –≤—Å–µ–≥–æ –ª–∏—à—å —Å–∫—Ä–æ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∫–∞, –ø–æ—á–∏ –Ω—è—Ç—å –º–∏—Ä–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤ –º–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö.üßû‚Äç‚ôÇÔ∏è",
            "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏. –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–æ—â–µ?üßû‚Äç‚ôÇÔ∏è","–í –º–æ–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?üßû‚Äç‚ôÇÔ∏è",
            "–ú–æ—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –º–∞–≥–∏—è —Å–∏–ª—å–Ω–∞, –Ω–æ –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É. –ú–æ–∂–µ—Ç, –µ—â–µ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å–∏–∫?üßû‚Äç‚ôÇÔ∏è","–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –º–æ–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π. –ù–æ —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º!üßû‚Äç‚ôÇÔ∏è"
        };


        public TelegramBotHostedService(string botToken, IConfiguration _configuration)
        {
            _botClient = new TelegramBotClient(botToken);
            _configuration = _configuration;
            _allowedUsernames = _configuration.GetSection("TelegramBotSettings:AllowedUsernames").Get<List<string>>();
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);

            // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            _ = ReceiveMessagesAsync(0, _cts.Token);
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            _cts.Cancel();

            return Task.CompletedTask;
        }

        private async Task ReceiveMessagesAsync(int offset, CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                var updates = await _botClient.GetUpdatesAsync(offset, cancellationToken: cancellationToken);

                foreach (var update in updates)
                {
                    if (update.Type == UpdateType.Message)
                    {
                        var curMessage = update.Message;

                        if (_allowedUsernames.Contains(curMessage.From.Username))
                        {
                            await HandleUpdateMessageAsync(curMessage, cancellationToken);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(curMessage.Chat.Id, "üö´ –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! üôÖ‚Äç‚ôÇÔ∏è", cancellationToken: cancellationToken);
                        }
                    }
                    else if (update.Type == UpdateType.CallbackQuery)
                    {
                        var curQuery = update.CallbackQuery;

                        if (_allowedUsernames.Contains(curQuery.From.Username))
                        {
                            await HandleUpdateCallbackQueryAsync(curQuery, cancellationToken);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(curQuery.Message.Chat.Id, "üö´ –Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! üôÖ‚Äç‚ôÇÔ∏è", cancellationToken: cancellationToken);
                        }
                    }
                    offset = update.Id + 1;
                }

            }
        }

        #region MessageHandler
        private async Task HandleUpdateMessageAsync(Message message, CancellationToken cancellationToken)
        {
            long chatId = message.Chat.Id;
            string username = message.From.Username;
            string messageText = message.Text;

            if (message.Type == MessageType.Document)
            {
                await CreateFileForBoardAsync(chatId, message.Document, cancellationToken);
                return;
            }

            string usernamePattern = @"(?<=^|\s)(?:@(?<name>[\w]+)|https://t\.me/(?<name>\w+))";
            Match usernameMatch = Regex.Match(messageText, usernamePattern);

            if (usernameMatch.Success)
            {
                string usernameValue = usernameMatch.Groups["name"].Value; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —á–∞—Å—Ç–∏
                GetAccesToUser(chatId, usernameValue, cancellationToken);
                return;
            }

            string pattern = @"^(\S+)\s+\[([^\[\]]+)\]\s+\[([^\[\]]+)\]";
            Match match = Regex.Match(messageText, pattern);

            if (match.Success)
            {
                string command = match.Groups[1].Value;
                string oldName = match.Groups[2].Value;
                string newName = match.Groups[3].Value;

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rename
                if (command == "/rename")
                {
                    // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    await RenameFileAsync(chatId, oldName, newName);
                    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞, –µ—Å–ª–∏ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /rename
                }
            }

            switch (messageText)
            {
                //–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø
                case "–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚ùå":
                    await AskDeleteFileFromBoardAsync(chatId, cancellationToken);
                    break;
                case "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚úÖ":
                    await AskCreateFileForBoardAsync(chatId, cancellationToken);
                    break;
                case "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø üë•":
                    await AskGetAccesToUserAsync(chatId, cancellationToken);
                    break;
                case "–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø üö∑":
                    await AskCloseUserAccesAsync(chatId, cancellationToken);
                    break;
                case "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚úèÔ∏è":
                    await AskRenameFileForBoardAsync(chatId, cancellationToken);
                    break;

                //–î–µ—Ñ–æ–ª—Ç(–°—Ç–∞—Ä—Ç)
                case "–û—Ç–º–µ–Ω–∞":
                case "–°—Ç–æ–ø":
                case "–æ—Ç–º–µ–Ω–∞":
                case "—Å—Ç–æ–ø":
                default:
                    var keyboard = new ReplyKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            new KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚úÖ"),
                            new KeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚úèÔ∏è"),
                            new KeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚ùå")
                        },
                        new[]
                        {
                            new KeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø üë•"),
                            new KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø üö∑")
                        }
                    });

                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?üßû‚Äç‚ôÇÔ∏è\n\nü§ñ –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\" –∏–ª–∏ \"—Å—Ç–æ–ø\"",
                        replyMarkup: keyboard
                    );
                    break;
            }
        }

        private async Task AskDeleteFileFromBoardAsync(long chatId, CancellationToken cancellationToken)
        {
            string command = "delete";
            try
            {
                await SendDocumentListAsync(chatId, 1, command, cancellationToken);
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task AskRenameFileForBoardAsync(long chatId, CancellationToken cancellationToken)
        {
            string command = "rename";
            try
            {
                await SendDocumentListAsync(chatId, 1, command, cancellationToken);
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task AskCreateFileForBoardAsync(long chatId, CancellationToken cancellationToken)
        {
            await _botClient.SendTextMessageAsync(chatId, "ü§ñ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", cancellationToken: cancellationToken);

        }

        private async Task GetAccesToUser(long chatId, string param, CancellationToken cancellationToken)
        {
            try
            {
                if (!_allowedUsernames.Contains(param))
                {
                    _allowedUsernames.Add(param);

                    var configPath = Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json");
                    var configJson = System.IO.File.ReadAllText(configPath);
                    var configDoc = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(configJson);

                    var allowedUsernames = configDoc["TelegramBotSettings"]["AllowedUsernames"] as JArray;
                    if (allowedUsernames != null)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ allowedUsernames –∑–Ω–∞—á–µ–Ω–∏–µ param
                        if (!allowedUsernames.Contains(param))
                        {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
                            allowedUsernames.Add(param);
                        }
                    }
                    var updatedConfigJson = Newtonsoft.Json.JsonConvert.SerializeObject(configDoc, Newtonsoft.Json.Formatting.Indented);
                    System.IO.File.WriteAllText(configPath, updatedConfigJson);

                    await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{param} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–∞—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞");
                }
                else
                {
                    await _botClient.SendTextMessageAsync(chatId, $"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{param} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞");
                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∞–≤: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task CloseAccesFromUser(long chatId, string param, CancellationToken cancellationToken)
        {
            try
            {
                if (_allowedUsernames.Contains(param))
                {
                    _allowedUsernames.Remove(param);

                    var configPath = Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json");
                    var configJson = System.IO.File.ReadAllText(configPath);
                    var configDoc = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(configJson);

                    var allowedUsernames = configDoc["TelegramBotSettings"]["AllowedUsernames"];
                    if (allowedUsernames != null)
                    {
                        // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                        int indexToRemove = -1;
                        for (int i = 0; i < allowedUsernames.Count; i++)
                        {
                            if (allowedUsernames[i].ToString() == param)
                            {
                                indexToRemove = i;
                                break;
                            }
                        }

                        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        if (indexToRemove != -1)
                        {
                            allowedUsernames.RemoveAt(indexToRemove);
                        }
                    }
                    var updatedConfigJson = Newtonsoft.Json.JsonConvert.SerializeObject(configDoc, Newtonsoft.Json.Formatting.Indented);
                    System.IO.File.WriteAllText(configPath, updatedConfigJson);

                    await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{param} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö");
                }
                else
                {
                    await _botClient.SendTextMessageAsync(chatId, $"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{param} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö");
                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task AskGetAccesToUserAsync(long chatId, CancellationToken cancellationToken)
        {
            await _botClient.SendTextMessageAsync(chatId, "ü§ñ –û—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", cancellationToken: cancellationToken);
        }

        private async Task AskCloseUserAccesAsync(long chatId, CancellationToken cancellationToken)
        {
            string command = "closeAccesUser";
            try
            {
                await SendAllowedUsersListAsync(chatId, 1, command, cancellationToken);
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
            //await _botClient.SendTextMessageAsync(chatId, "ü§ñ –°–∫–æ—Ä–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±–∏—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", cancellationToken: cancellationToken);
        }

        private async Task SendDocumentListAsync(long chatId, int pageNumber, string command, CancellationToken cancellationToken)
        {
            try
            {
                var directoryPath = Path.Combine("wwwroot", "documents-news-events", "documents");

                var directories = Directory.GetDirectories(directoryPath, "*", SearchOption.AllDirectories).ToList();

                const int pageSize = 5;
                var startIndex = (pageNumber - 1) * pageSize;
                var endIndex = Math.Min(startIndex + pageSize, directories.Count);

                var directorySubset = directories.GetRange(startIndex, endIndex - startIndex);

                var buttons = new List<List<InlineKeyboardButton>>();

                foreach (var dir in directorySubset)
                {
                    string str = Path.GetFileName(dir);
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("{0}:{1}", command, Path.GetFileNameWithoutExtension(dir));

                    buttons.Add(new List<InlineKeyboardButton>
                    {
                        InlineKeyboardButton.WithCallbackData(str, com.ToString())
                    });
                }

                List<InlineKeyboardButton> padding = new List<InlineKeyboardButton>();

                if (pageNumber > 1)
                {
                    // –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("previous-{1}:{0}", pageNumber - 1, command);
                    padding.Add(InlineKeyboardButton.WithCallbackData("<", com.ToString()));
                }

                StringBuilder info = new StringBuilder();
                info.AppendFormat("{0}/{1}", pageNumber, (int)Math.Ceiling((double)directories.Count / pageSize));
                padding.Add(InlineKeyboardButton.WithCallbackData(info.ToString(), " "));

                if (endIndex < directories.Count)
                {
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("next-{1}:{0}", pageNumber + 1, command);
                    padding.Add(InlineKeyboardButton.WithCallbackData(">", com.ToString()));
                }

                buttons.Add(padding);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
                await _botClient.SendTextMessageAsync(
                    chatId,
                    "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:",
                    replyMarkup: new InlineKeyboardMarkup(buttons));
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task SendAllowedUsersListAsync(long chatId, int pageNumber, string command, CancellationToken cancellationToken)
        {
            try
            {
                var configPath = Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json");
                var configJson = System.IO.File.ReadAllText(configPath);
                var configDoc = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(configJson);
                var allowedUsernames = configDoc["TelegramBotSettings"]["AllowedUsernames"] as JArray;

                if (allowedUsernames == null)
                {
                    throw new Exception("‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }

                const int pageSize = 5;
                var startIndex = (pageNumber - 1) * pageSize;
                var endIndex = Math.Min(startIndex + pageSize, allowedUsernames.Count);

                var usernamesSubset = allowedUsernames.Skip(startIndex).Take(endIndex - startIndex);

                var buttons = new List<List<InlineKeyboardButton>>();

                foreach (var username in usernamesSubset)
                {
                    string displayName = username.ToString();
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("{0}:{1}", command, displayName);

                    buttons.Add(new List<InlineKeyboardButton>
                    {
                        InlineKeyboardButton.WithCallbackData(displayName, com.ToString())
                    });
                }

                List<InlineKeyboardButton> navigationButtons = new List<InlineKeyboardButton>();

                if (pageNumber > 1)
                {
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("previous-{1}:{0}", pageNumber - 1, command);
                    navigationButtons.Add(InlineKeyboardButton.WithCallbackData("<", com.ToString()));
                }

                StringBuilder info = new StringBuilder();
                info.AppendFormat("{0}/{1}", pageNumber, (int)Math.Ceiling((double)allowedUsernames.Count / pageSize));
                navigationButtons.Add(InlineKeyboardButton.WithCallbackData(info.ToString(), " "));

                if (endIndex < allowedUsernames.Count)
                {
                    StringBuilder com = new StringBuilder();
                    com.AppendFormat("next-{1}:{0}", pageNumber + 1, command);
                    navigationButtons.Add(InlineKeyboardButton.WithCallbackData(">", com.ToString()));
                }

                buttons.Add(navigationButtons);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
                await _botClient.SendTextMessageAsync(
                    chatId,
                    "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:",
                    replyMarkup: new InlineKeyboardMarkup(buttons));
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {ex.Message}");
            }
        }

        #endregion

        #region CallBackQueryHandler
        private async Task HandleUpdateCallbackQueryAsync(CallbackQuery query, CancellationToken cancellationToken)
        {
            long chatId = query.Message.Chat.Id;
            string username = query.From.Username;

            string sub_command = "";
            string command = query.Data.Split(":")[0];

            try
            {
                sub_command = command.Split("-")[1];
                command = command.Split("-")[0];
            }
            catch { }

            string param = query.Data.Split(":")[1];
            try
            {
                switch (command)
                {
                    //–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø
                    case "delete":
                        await DeleteFileFromBoardAsync(param, chatId, cancellationToken);
                        break;
                    case "previous":
                    case "next":
                        switch (sub_command)
                        {
                            case "closeAccesUser":
                                await SendAllowedUsersListAsync(chatId, int.Parse(param), sub_command, cancellationToken);
                                break;
                            default:
                                await SendDocumentListAsync(chatId, int.Parse(param), sub_command, cancellationToken);
                                break;
                        }
                        break;
                    case "rename":
                        await AskRenameFileFromBoardAsync(param, chatId, cancellationToken);
                        break;
                    case "closeAccesUser":
                        await CloseAccesFromUser(chatId, param, cancellationToken);
                        break;
                    case "getAccesUser":
                        await AskGetAccesToUserAsync(chatId, cancellationToken);
                        break;

                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task DeleteFileFromBoardAsync(string param, long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var directoryPath = Path.Combine("wwwroot", "documents-news-events", "documents");

                var directories = Directory.GetDirectories(directoryPath, "*", SearchOption.AllDirectories)
                    .Where(dir => Path.GetFileNameWithoutExtension(dir).Contains(param))
                    .ToList();

                foreach (var directory in directories)
                {
                    try
                    {
                        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
                        Directory.Delete(directory, true);
                        await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç \"{Path.GetFileName(directory)}\" –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
                        break;
                    }
                    catch (Exception ex)
                    {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏
                        await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {Path.GetFileName(directory)}: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
                    }
                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        private async Task AskRenameFileFromBoardAsync(string param, long chatId, CancellationToken cancellationToken)
        {
            try
            {
                await _botClient.SendTextMessageAsync(
                      chatId,
                      $"<code>/rename [{param}] []</code> \n\nü§ñ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –Ω–µ—ë) –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ –≤—Ç–æ—Ä—ã–µ —Å–∫–æ–±–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.\n\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µüßû‚Äç‚ôÇÔ∏è",
                      parseMode: ParseMode.Html);
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}\n\n{mySolutions[new Random().Next(0, mySolutions.Count())]}");
            }
        }

        #endregion

        private async Task RenameFileAsync(long chatId, string oldName, string newName)
        {
            try
            {
                var mainDirectoryPath = Path.Combine("wwwroot", "documents-news-events", "documents");

                var directories = Directory.GetDirectories(mainDirectoryPath, $"{oldName}", SearchOption.AllDirectories).ToList();

                if (directories.Any())
                {
                    foreach (var directoryPath in directories)
                    {
                        try
                        {
                            string newDirectoryPath = Path.Combine(Path.GetDirectoryName(directoryPath), newName);

                            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                            Directory.Move(directoryPath, newDirectoryPath);
                            await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç \"{Path.GetFileName(directoryPath)}\" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ \"{Path.GetFileName(newDirectoryPath)}\"");
                        }
                        catch (Exception ex)
                        {
                            await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
                        }
                    }
                }
                else
                {
                    await _botClient.SendTextMessageAsync(chatId, $"–î–æ–∫—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º \"{oldName}\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
            }
        }

        private async Task CreateFileForBoardAsync(long chatId, Telegram.Bot.Types.Document document, CancellationToken cancellationToken)
        {
            var extension = Path.GetExtension(document.FileName).ToLower();
            if (extension != ".pdf" && extension != ".docx" && extension != ".doc")
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ \"{document.FileName}\" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏ Word.");
                return;
            }

            var fileId = document.FileId;

            var tempFilePath = Path.Combine("wwwroot", "documents-news-events", "documents", document.FileName);

            var directoryName = Path.GetFileNameWithoutExtension(document.FileName); // –ò–º—è –ø–∞–ø–∫–∏ –±—É–¥–µ—Ç –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            var directoryPath = Path.Combine("wwwroot", "documents-news-events", "documents", directoryName);

            if (Directory.Exists(directoryPath))
            {
                await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º \"{directoryName}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                return;
            }
            else
            {
                Directory.CreateDirectory(directoryPath);
            }

            var file = await _botClient.GetFileAsync(fileId);

            try
            {
                using (var saveImageStream = System.IO.File.Open(tempFilePath, FileMode.Create))
                {
                    await _botClient.DownloadFileAsync(file.FilePath, saveImageStream, cancellationToken);
                }

                var savedExtension = Path.GetExtension(tempFilePath).ToLower();
                if (savedExtension == ".pdf")
                {
                    SavePdfToImg(tempFilePath, Path.Combine("wwwroot", "documents-news-events", "documents", Path.GetFileNameWithoutExtension(document.FileName)));

                    System.IO.File.Delete(tempFilePath);
                }
                else
                {
                    string newSourcePath = Path.Combine(Path.GetDirectoryName(tempFilePath), $"{Path.GetFileNameWithoutExtension(tempFilePath)}.pdf");

                    ConvertDocToPdf(tempFilePath, newSourcePath);
                    SavePdfToImg(newSourcePath, Path.Combine("wwwroot", "documents-news-events", "documents", Path.GetFileNameWithoutExtension(document.FileName)));

                    System.IO.File.Delete(newSourcePath);
                }

                await _botClient.SendTextMessageAsync(chatId, $"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç \"{Path.GetFileName(document.FileName)}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
            }
            catch (Exception ex)
            {
                Directory.Delete(Path.Combine("wwwroot", "documents-news-events", "documents", Path.GetFileNameWithoutExtension(document.FileName)), true);
                await _botClient.SendTextMessageAsync(chatId, $"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ \"{Path.GetFileName(document.FileName)}\": {ex.Message}");
            }
        }

        static void ConvertDocToPdf(string docFilePath, string pdfFilePath)
        {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º DOCX —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ DocX
            using (var document = DocX.Load(docFilePath))
            {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
                var pdf = new PdfSharpCore.Pdf.PdfDocument();
                PdfSharpCore.Pdf.PdfPage page = pdf.AddPage();
                XGraphics gfx = XGraphics.FromPdfPage(page);

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                XFont font = new XFont("Arial", 12, XFontStyle.Regular);
                double yPosition = 20;

                // –ß–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ PDF
                foreach (var paragraph in document.Paragraphs)
                {
                    gfx.DrawString(paragraph.Text, font, XBrushes.Black,
                        new XRect(20, yPosition, page.Width - 40, page.Height - 40),
                        XStringFormats.TopLeft);
                    yPosition += 20; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
                    if (yPosition > page.Height - 40)
                    {
                        page = pdf.AddPage();
                        gfx = XGraphics.FromPdfPage(page);
                        yPosition = 20;
                    }
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                foreach (var table in document.Tables)
                {
                    double tableYPosition = yPosition;
                    double tableXPosition = 20;
                    double columnWidth = (page.Width - 40) / table.ColumnCount; // —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
                    double rowHeight = 20; // –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏

                    // –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
                    foreach (var row in table.Rows)
                    {
                        double rowYPosition = tableYPosition;
                        tableXPosition = 20;

                        foreach (var cell in row.Cells)
                        {
                            // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
                            gfx.DrawRectangle(XPens.Black, tableXPosition, rowYPosition, columnWidth, rowHeight);

                            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–∞—Ö
                            gfx.DrawString(cell.Paragraphs[0].Text, font, XBrushes.Black,
                                new XRect(tableXPosition + 2, rowYPosition + 2, columnWidth - 4, rowHeight - 4),
                                XStringFormats.TopLeft);

                            tableXPosition += columnWidth; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
                        }

                        tableYPosition += rowHeight; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ

                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
                        if (tableYPosition + rowHeight > page.Height - 40)
                        {
                            page = pdf.AddPage();
                            gfx = XGraphics.FromPdfPage(page);
                            tableYPosition = 20;
                        }
                    }
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                foreach (var image in document.Images)
                {
                    using (var imageStream = image.GetStream(FileMode.Open, FileAccess.Read))
                    {
                        var pdfImage = XImage.FromStream(() => imageStream);

                        gfx.DrawImage(pdfImage, 20, yPosition, pdfImage.PixelWidth, pdfImage.PixelHeight);
                        yPosition += pdfImage.PixelHeight + 10; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É

                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
                        if (yPosition > page.Height - 40)
                        {
                            page = pdf.AddPage();
                            gfx = XGraphics.FromPdfPage(page);
                            yPosition = 20;
                        }
                    }
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
                using (FileStream stream = new FileStream(pdfFilePath, FileMode.Create, FileAccess.Write))
                {
                    pdf.Save(stream);
                }
            }
        }

        static void SavePdfToImg(string sourcePath, string destinationFolder)
        {
            int pagesPerPart = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            if (!Directory.Exists(destinationFolder))
            {
                Directory.CreateDirectory(destinationFolder);
            }

            using (var document = Patagames.Pdf.Net.PdfDocument.Load(sourcePath))
            {
                int totalPages = document.Pages.Count; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ

                // –¶–∏–∫–ª –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                for (int page = 0; page < totalPages; page++)
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    var pdfPage = document.Pages[page];
                    int width = (int)(pdfPage.Width * 2);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 2 —Ä–∞–∑–∞)
                    int height = (int)(pdfPage.Height * 2);

                    // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (300 DPI)
                    using (var image = new Bitmap(width, height))
                    {
                        using (var graphics = Graphics.FromImage(image))
                        {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ –±–µ–ª—ã–π (PDF-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)
                            graphics.Clear(System.Drawing.Color.White);

                            // –ü–æ–ª—É—á–∞–µ–º HDC –∏–∑ Graphics
                            IntPtr hdc = graphics.GetHdc();
                            try
                            {
                                // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ HDC
                                pdfPage.Render(hdc, 0, 0, width, height, PageRotate.Normal, RenderFlags.FPDF_LCD_TEXT);
                            }
                            finally
                            {
                                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º HDC
                                graphics.ReleaseHdc(hdc);
                            }

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            string outputPath = Path.Combine(destinationFolder, $"Page_{page + 1}.png");
                            image.Save(outputPath, ImageFormat.Png);

                        }
                    }
                }
            }
        }


    }
}
